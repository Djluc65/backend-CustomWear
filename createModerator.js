const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

// Mod√®le User
const userSchema = new mongoose.Schema({
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  pseudo: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, enum: ['user', 'admin', 'moderator'], default: 'user' },
  isActive: { type: Boolean, default: true },
  emailVerified: { type: Boolean, default: false }
}, { timestamps: true });

const User = mongoose.model('User', userSchema);

async function createModerator() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // V√©rifier si le mod√©rateur existe d√©j√†
    const existingModerator = await User.findOne({ email: 'moderator@customwear.com' });
    if (existingModerator) {
      console.log('‚ÑπÔ∏è  Le mod√©rateur existe d√©j√†');
      return;
    }

    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash('moderator123456', 12);

    // Cr√©er un utilisateur mod√©rateur
    const moderatorUser = new User({
      firstName: 'Moderator',
      lastName: 'User',
      pseudo: 'Moderator',
      email: 'moderator@customwear.com',
      password: hashedPassword,
      role: 'moderator',
      isActive: true,
      emailVerified: true
    });

    await moderatorUser.save();
    console.log('‚úÖ Utilisateur mod√©rateur cr√©√© avec succ√®s !');
    console.log('üìß Email: moderator@customwear.com');
    console.log('üîë Mot de passe: moderator123456');
    console.log('üë§ R√¥le: moderator');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Connexion MongoDB ferm√©e');
  }
}

createModerator();